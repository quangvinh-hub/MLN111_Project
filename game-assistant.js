// Simple Neural Network for game prediction
class SimpleNeuralNetwork {
  constructor() {
    this.weights = {
      input: this.randomMatrix(6, 8), // 6 indicators -> 8 hidden
      hidden: this.randomMatrix(8, 4), // 8 hidden -> 4 outputs
    };
    this.learningRate = 0.1;
    this.trainingEpochs = 0;
  }

  randomMatrix(rows, cols) {
    return Array(rows)
      .fill()
      .map(() =>
        Array(cols)
          .fill()
          .map(() => Math.random() * 2 - 1)
      );
  }

  sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
  }

  forward(inputs) {
    // Hidden layer
    const hidden = this.weights.input.map((weights) =>
      this.sigmoid(weights.reduce((sum, w, i) => sum + w * inputs[i], 0))
    );

    // Output layer
    const outputs = this.weights.hidden.map((weights) =>
      this.sigmoid(weights.reduce((sum, w, i) => sum + w * hidden[i], 0))
    );

    return { hidden, outputs };
  }

  predict(gameState) {
    const inputs = this.normalizeGameState(gameState);
    const result = this.forward(inputs);

    return {
      winProbability: result.outputs[0],
      riskLevel: result.outputs[1],
      economicScore: result.outputs[2],
      socialScore: result.outputs[3],
    };
  }

  normalizeGameState(state) {
    const indicators = state.currentIndicators || {};
    return [
      (indicators.gdp || 50) / 100,
      (indicators.unemployment || 50) / 100,
      (indicators.gini || 50) / 100,
      (indicators.legitimacy || 50) / 100,
      (indicators.military || 50) / 100,
      (indicators.publicServices || 50) / 100,
    ];
  }

  // Training v·ªõi backpropagation ƒë∆°n gi·∫£n
  train(trainingSet) {
    console.log("üß† B·∫Øt ƒë·∫ßu training neural network...");

    for (let epoch = 0; epoch < 100; epoch++) {
      let totalError = 0;

      trainingSet.forEach((data) => {
        const inputs = this.normalizeGameState(data.input);
        const expected = data.output;
        const result = this.forward(inputs);

        // T√≠nh error
        const outputError = expected.map((exp, i) => exp - result.outputs[i]);
        totalError += outputError.reduce((sum, err) => sum + err * err, 0);

        // Simplified backpropagation (ch·ªâ ƒëi·ªÅu ch·ªânh weights ƒë∆°n gi·∫£n)
        this.adjustWeights(inputs, result, outputError);
      });

      if (epoch % 20 === 0) {
        console.log(`Epoch ${epoch}: Error = ${totalError.toFixed(4)}`);
      }
    }

    this.trainingEpochs += 100;
    console.log("‚úÖ Training ho√†n th√†nh!");
  }

  adjustWeights(inputs, result, outputError) {
    // Simplified weight adjustment
    for (let i = 0; i < this.weights.hidden.length; i++) {
      for (let j = 0; j < this.weights.hidden[i].length; j++) {
        this.weights.hidden[i][j] +=
          this.learningRate * outputError[i] * result.hidden[j];
      }
    }
  }
}

// AI Prediction Engine for game outcomes
class GamePredictor {
  constructor() {
    this.historicalData = [];
    this.patterns = new Map();
  }

  // D·ª± ƒëo√°n k·∫øt qu·∫£ d·ª±a tr√™n ch√≠nh s√°ch hi·ªán t·∫°i
  predictOutcome(currentState, proposedPolicy) {
    const prediction = {
      riskLevel: "medium",
      expectedChanges: {},
      confidence: 0.7,
      recommendations: [],
      warnings: [],
    };

    // Ph√¢n t√≠ch r·ªßi ro d·ª±a tr√™n pattern
    const risk = this.calculateRisk(currentState, proposedPolicy);
    prediction.riskLevel = risk.level;
    prediction.confidence = risk.confidence;

    // D·ª± ƒëo√°n thay ƒë·ªïi ch·ªâ s·ªë
    prediction.expectedChanges = this.predictIndicatorChanges(
      currentState,
      proposedPolicy
    );

    // Sinh ra c·∫£nh b√°o th√¥ng minh
    prediction.warnings = this.generateSmartWarnings(
      currentState,
      proposedPolicy
    );

    return prediction;
  }

  calculateRisk(state, policy) {
    let riskScore = 0;

    // T√≠nh to√°n r·ªßi ro d·ª±a tr√™n t√¨nh h√¨nh hi·ªán t·∫°i
    if (state.indicators?.unemployment > 70) riskScore += 3;
    if (state.indicators?.gini > 70) riskScore += 3;
    if (state.indicators?.gdp < 30) riskScore += 4;
    if (state.indicators?.legitimacy < 30) riskScore += 5;

    // R·ªßi ro t·ª´ nh√≥m x√£ h·ªôi
    const unhappyGroups = Object.values(state.socialGroups || {}).filter(
      (v) => v < 25
    ).length;
    riskScore += unhappyGroups * 2;

    // X√°c ƒë·ªãnh level
    let level = "low";
    if (riskScore > 8) level = "high";
    else if (riskScore > 4) level = "medium";

    return {
      level,
      score: riskScore,
      confidence: Math.min(0.9, 0.5 + riskScore * 0.05),
    };
  }

  predictIndicatorChanges(state, policy) {
    // Simplified prediction model
    const changes = {};

    // D·ª± ƒëo√°n d·ª±a tr√™n pattern th√¥ng th∆∞·ªùng
    if (policy?.includes("thu·∫ø")) {
      changes.gdp = "c√≥ th·ªÉ gi·∫£m nh·∫π";
      changes.legitimacy = "c√≥ th·ªÉ tƒÉng";
    }

    return changes;
  }

  generateSmartWarnings(state, policy) {
    const warnings = [];

    // C·∫£nh b√°o v·ªÅ domino effect
    if (state.indicators?.unemployment > 60 && state.indicators?.gini > 60) {
      warnings.push(
        "‚ö†Ô∏è Nguy c∆° b·∫•t ·ªïn x√£ h·ªôi cao - th·∫•t nghi·ªáp + b·∫•t b√¨nh ƒë·∫≥ng!"
      );
    }

    // C·∫£nh b√°o v·ªÅ timing
    if (state.currentTurn > 7 && state.indicators?.legitimacy < 40) {
      warnings.push("üïí Th·ªùi gian √≠t, uy t√≠n th·∫•p - c·∫ßn h√†nh ƒë·ªông quy·∫øt li·ªát!");
    }

    return warnings;
  }
}

// Advanced Local Game Assistant with AI capabilities
class GameAssistant {
  constructor() {
    this.gameKnowledge = {
      basic: {
        "l√†m sao ch∆°i":
          "B·∫°n ƒë√≥ng vai th·ªß t∆∞·ªõng, m·ªói l∆∞·ª£t ch·ªçn 1 ch√≠nh s√°ch trong 10 l∆∞·ª£t. M·ª•c ti√™u l√† c√¢n b·∫±ng c√°c ch·ªâ s·ªë qu·ªëc gia v√† s·ª± h√†i l√≤ng c·ªßa c√°c nh√≥m x√£ h·ªôi.",
        "c√°ch ch∆°i":
          "1) Quan s√°t c√°c ch·ªâ s·ªë hi·ªán t·∫°i, 2) Ch·ªçn 1 ch√≠nh s√°ch ph√π h·ª£p, 3) Xem t√°c ƒë·ªông, 4) Chuy·ªÉn sang l∆∞·ª£t ti·∫øp theo. L·∫∑p l·∫°i 10 l∆∞·ª£t.",
        "m·ª•c ti√™u":
          "C√¢n b·∫±ng l·ª£i √≠ch qu·ªëc gia v√† c√°c giai c·∫•p x√£ h·ªôi. Kh√¥ng ƒë·ªÉ ch·ªâ s·ªë n√†o qu√° th·∫•p ho·∫∑c nh√≥m n√†o qu√° b·∫•t m√£n.",
        "th·∫Øng thua":
          "Th·∫Øng khi ho√†n th√†nh 10 l∆∞·ª£t m√† c√°c ch·ªâ s·ªë ·ªïn ƒë·ªãnh. Thua khi ch·ªâ s·ªë quan tr·ªçng xu·ªëng qu√° th·∫•p.",
      },
      indicators: {
        gdp: "T·ªïng s·∫£n ph·∫©m qu·ªëc n·ªôi (0-100). Th∆∞·ªõc ƒëo s·ª©c kh·ªèe kinh t·∫ø. C√†ng cao c√†ng t·ªët.",
        "th·∫•t nghi·ªáp":
          "T·ª∑ l·ªá th·∫•t nghi·ªáp (0-100). C√†ng TH·∫§P c√†ng t·ªët! Cao qu√° s·∫Ω g√¢y b·∫•t ·ªïn x√£ h·ªôi.",
        gini: "Ch·ªâ s·ªë b·∫•t b√¨nh ƒë·∫≥ng thu nh·∫≠p (0-100). C√†ng TH·∫§P c√†ng c√¥ng b·∫±ng! Cao nghƒ©a l√† gi√†u ngh√®o ch√™nh l·ªách.",
        "uy t√≠n":
          "M·ª©c ƒë·ªô tin t∆∞·ªüng d√¢n ch√∫ng (0-100). C√†ng cao c√†ng t·ªët. Th·∫•p qu√° c√≥ th·ªÉ m·∫•t quy·ªÅn l·ª±c.",
        "qu√¢n s·ª±":
          "S·ª©c m·∫°nh qu·ªëc ph√≤ng (0-100). C√†ng cao c√†ng t·ªët. C·∫ßn cho an ninh nh∆∞ng ƒë·∫Øt ƒë·ªè.",
        "d·ªãch v·ª• c√¥ng":
          "Ch·∫•t l∆∞·ª£ng y t·∫ø, gi√°o d·ª•c... (0-100). C√†ng cao c√†ng t·ªët. Quan tr·ªçng cho d√¢n sinh.",
      },
      groups: {
        "c√¥ng nh√¢n": "Quan t√¢m l∆∞∆°ng cao, ph√∫c l·ª£i. ·ª¶ng h·ªô ch√≠nh s√°ch x√£ h·ªôi.",
        "trung l∆∞u": "Quan t√¢m ·ªïn ƒë·ªãnh, gi√°o d·ª•c. C·∫ßn c√¢n b·∫±ng.",
        "t∆∞ b·∫£n": "Quan t√¢m l·ª£i nhu·∫≠n, thu·∫ø th·∫•p. ·ª¶ng h·ªô t·ª± do kinh doanh.",
        "thanh ni√™n": "Quan t√¢m vi·ªác l√†m, m√¥i tr∆∞·ªùng, c√¥ng ngh·ªá.",
        freelancer: "Quan t√¢m linh ho·∫°t, ƒë·ªïi m·ªõi, kh·ªüi nghi·ªáp.",
      },
      policies: {
        "thu·∫ø doanh nghi·ªáp":
          "TƒÉng ng√¢n s√°ch nh∆∞ng doanh nghi·ªáp kh√¥ng th√≠ch. T·ªët cho ƒë·∫ßu t∆∞ c√¥ng.",
        "l∆∞∆°ng t·ªëi thi·ªÉu": "C√¥ng nh√¢n vui nh∆∞ng c√≥ th·ªÉ gi·∫£m vi·ªác l√†m ng·∫Øn h·∫°n.",
        "gi√°o d·ª•c": "T·ªët d√†i h·∫°n cho m·ªçi nh√≥m. C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng nh√¢n l·ª±c.",
        "qu·ªëc ph√≤ng": "TƒÉng an ninh nh∆∞ng t·ªën k√©m. M·ªôt s·ªë nh√≥m ·ªßng h·ªô.",
        "m√¥i tr∆∞·ªùng": "Thanh ni√™n th√≠ch nh∆∞ng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng s·∫£n xu·∫•t.",
        "kh·ªüi nghi·ªáp": "Freelancer v√† thanh ni√™n th√≠ch. Th√∫c ƒë·∫©y ƒë·ªïi m·ªõi.",
        "y t·∫ø": "T·ªët cho d√¢n sinh nh∆∞ng t·ªën ng√¢n s√°ch. Trung l∆∞u ·ªßng h·ªô.",
        "h·∫° t·∫ßng":
          "T·∫°o vi·ªác l√†m, th√∫c ƒë·∫©y kinh t·∫ø. C√¥ng nh√¢n v√† t∆∞ b·∫£n ƒë·ªÅu th√≠ch.",
      },
      strategy: {
        "b·∫Øt ƒë·∫ßu":
          "Quan s√°t ch·ªâ s·ªë ban ƒë·∫ßu. ∆Øu ti√™n ch·ªâ s·ªë th·∫•p nh·∫•t. Ch·ªçn ch√≠nh s√°ch c√¢n b·∫±ng.",
        "gi·ªØa game": "Theo d√µi xu h∆∞·ªõng. ƒêi·ªÅu ch·ªânh khi c√≥ nh√≥m qu√° b·∫•t m√£n.",
        "cu·ªëi game":
          "Duy tr√¨ ·ªïn ƒë·ªãnh. Tr√°nh thay ƒë·ªïi l·ªõn. Chu·∫©n b·ªã cho k·∫øt th√∫c.",
        "kh·∫©n c·∫•p": "N·∫øu ch·ªâ s·ªë xu·ªëng d∆∞·ªõi 20, ∆∞u ti√™n c·ª©u ngay l·∫≠p t·ª©c.",
        "c√¢n b·∫±ng":
          "Kh√¥ng ƒë·ªÉ nh√≥m n√†o d∆∞·ªõi 30 ƒëi·ªÉm. Lu√¢n phi√™n h·ªó tr·ª£ c√°c nh√≥m.",
      },
    };

    this.currentContext = null;
    this.conversationHistory = []; // L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
    this.userPreferences = {}; // H·ªçc t·ª´ h√†nh vi ng∆∞·ªùi d√πng
    this.gamePatterns = []; // Ph√°t hi·ªán pattern trong game
    this.predictionModel = new GamePredictor(); // AI d·ª± ƒëo√°n
    this.trainingData = this.initializeTrainingData(); // D·ªØ li·ªáu training
    this.neuralNetwork = new SimpleNeuralNetwork(); // M·∫°ng neural ƒë∆°n gi·∫£n
    this.isTraining = false;

    // Auto-load d·ªØ li·ªáu ƒë√£ training t·ª´ localStorage
    this.loadTrainingProgress();
  }

  // Initialize comprehensive training data
  initializeTrainingData() {
    return {
      // Training scenarios v·ªõi expected outcomes
      gameScenarios: [
        {
          input: {
            currentIndicators: {
              gdp: 30,
              unemployment: 70,
              gini: 80,
              legitimacy: 40,
              military: 50,
              publicServices: 45,
            },
            currentTurn: 3,
          },
          output: [0.2, 0.8, 0.3, 0.2], // [winProb, risk, economic, social]
          description: "Kh·ªßng ho·∫£ng kinh t·∫ø + x√£ h·ªôi",
        },
        {
          input: {
            currentIndicators: {
              gdp: 80,
              unemployment: 20,
              gini: 30,
              legitimacy: 70,
              military: 60,
              publicServices: 75,
            },
            currentTurn: 7,
          },
          output: [0.9, 0.1, 0.8, 0.8],
          description: "T√¨nh h√¨nh t·ªët",
        },
        {
          input: {
            currentIndicators: {
              gdp: 25,
              unemployment: 80,
              gini: 85,
              legitimacy: 20,
              military: 30,
              publicServices: 25,
            },
            currentTurn: 8,
          },
          output: [0.1, 0.95, 0.1, 0.1],
          description: "Kh·ªßng ho·∫£ng nghi√™m tr·ªçng",
        },
      ],

      // Policy effectiveness training data
      policyEffects: {
        infrastructure: {
          conditions: { gdp: "low", unemployment: "high" },
          effectiveness: 0.8,
          outcomes: { gdp: "+15", unemployment: "-10", workers: "+10" },
        },
        minimum_wage: {
          conditions: { gini: "high", workers: "low" },
          effectiveness: 0.7,
          outcomes: { gini: "-8", workers: "+15", unemployment: "+3" },
        },
      },
    };
  }

  // Load training progress from localStorage
  loadTrainingProgress() {
    const saved = localStorage.getItem("aiTrainingProgress");
    if (saved) {
      const data = JSON.parse(saved);
      this.neuralNetwork.trainingEpochs = data.epochs || 0;
      this.neuralNetwork.weights = data.weights || this.neuralNetwork.weights;
      console.log(
        `üìö Loaded AI training: ${this.neuralNetwork.trainingEpochs} epochs`
      );
    }
  }

  // Start comprehensive training
  async startTraining() {
    if (this.isTraining) {
      return "üß† AI ƒëang trong qu√° tr√¨nh training...";
    }

    this.isTraining = true;
    console.log("üöÄ B·∫Øt ƒë·∫ßu training AI...");

    // Train neural network v·ªõi basic scenarios
    this.neuralNetwork.train(this.trainingData.gameScenarios);

    // Save progress
    const data = {
      epochs: this.neuralNetwork.trainingEpochs,
      weights: this.neuralNetwork.weights,
      timestamp: Date.now(),
    };
    localStorage.setItem("aiTrainingProgress", JSON.stringify(data));

    this.isTraining = false;
    return "‚úÖ AI Training ho√†n th√†nh! Neural network ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p.";
  }

  // Enhanced AI prediction using trained model
  getAIPrediction(context) {
    if (!context) return null;

    const prediction = this.neuralNetwork.predict(context);

    return {
      accuracy: this.neuralNetwork.trainingEpochs > 100 ? "High" : "Medium",
      winChance: Math.round(prediction.winProbability * 100),
      riskLevel:
        prediction.riskLevel > 0.7
          ? "High"
          : prediction.riskLevel > 0.4
          ? "Medium"
          : "Low",
      economicOutlook: prediction.economicScore > 0.6 ? "Positive" : "Negative",
      socialStability: prediction.socialScore > 0.6 ? "Stable" : "Unstable",
      confidence: Math.min(95, 50 + this.neuralNetwork.trainingEpochs / 10),
      modelVersion: `v${
        Math.floor(this.neuralNetwork.trainingEpochs / 100) + 1
      }.${this.neuralNetwork.trainingEpochs % 100}`,
    };
  }

  updateContext(context) {
    this.currentContext = context;

    // H·ªçc t·ª´ h√†nh vi ng∆∞·ªùi d√πng
    this.learnFromGameState(context);

    // Ph√°t hi·ªán patterns
    this.detectGamePatterns(context);

    // Auto-training khi c√≥ ƒë·ªß d·ªØ li·ªáu m·ªõi
    this.autoTrainFromGameplay(context);
  }

  // Auto-training from real gameplay
  autoTrainFromGameplay(context) {
    // Ch·ªâ train khi c√≥ ƒë·ªß patterns m·ªõi
    if (this.gamePatterns.length > 0 && this.gamePatterns.length % 5 === 0) {
      const newTrainingData = this.generateTrainingFromPatterns();
      if (newTrainingData.length > 0) {
        console.log(
          `üéÆ Auto-training t·ª´ ${newTrainingData.length} game patterns...`
        );
        this.neuralNetwork.train(newTrainingData);
        this.saveTrainingProgress();

        // Notify user v·ªÅ AI improvement
        if (window.addMessage && Math.random() < 0.3) {
          // 30% chance to notify
          setTimeout(() => {
            window.addMessage(
              `üß† **AI T·ª∞ ƒê·ªòNG H·ªåC:**\n\nAI ƒë√£ h·ªçc t·ª´ c√°ch ch∆°i c·ªßa b·∫°n!\nüìà +${newTrainingData.length} training samples\nüí° AI gi·ªù hi·ªÉu b·∫°n h∆°n!`,
              false,
              ["AI status", "Test AI m·ªõi"]
            );
          }, 2000);
        }
      }
    }
  }

  // Generate training data from user patterns
  generateTrainingFromPatterns() {
    if (this.gamePatterns.length < 3) return [];

    const recentPatterns = this.gamePatterns.slice(-5);
    const trainingData = [];

    recentPatterns.forEach((pattern) => {
      // Calculate expected outcome based on actual game state
      const winProb = this.estimateWinProbability(pattern);
      const risk = this.estimateRisk(pattern);

      trainingData.push({
        input: {
          currentIndicators: {
            gdp: pattern.gdp,
            unemployment: pattern.unemployment,
            gini: pattern.gini,
            legitimacy: pattern.legitimacy,
            military: 50, // Default values for missing data
            publicServices: 50,
          },
          currentTurn: pattern.turn,
        },
        output: [winProb, risk, winProb * 0.8, winProb * 0.9],
      });
    });

    return trainingData;
  }

  estimateWinProbability(pattern) {
    let score = 0;

    // Scoring based on actual game rules
    if (pattern.gdp > 60) score += 0.3;
    else if (pattern.gdp < 30) score -= 0.3;

    if (pattern.unemployment < 40) score += 0.2;
    else if (pattern.unemployment > 70) score -= 0.4;

    if (pattern.gini < 40) score += 0.2;
    else if (pattern.gini > 70) score -= 0.3;

    if (pattern.legitimacy > 60) score += 0.3;
    else if (pattern.legitimacy < 30) score -= 0.4;

    return Math.max(0.1, Math.min(0.9, 0.5 + score));
  }

  estimateRisk(pattern) {
    let risk = 0.3; // Base risk

    if (pattern.unemployment > 75) risk += 0.3;
    if (pattern.gini > 75) risk += 0.2;
    if (pattern.gdp < 25) risk += 0.3;
    if (pattern.legitimacy < 25) risk += 0.4;

    return Math.min(0.95, risk);
  }

  // H·ªçc t·ª´ game state ƒë·ªÉ hi·ªÉu th√≥i quen ng∆∞·ªùi ch∆°i
  learnFromGameState(context) {
    if (!context) return;

    // Ghi nh·∫≠n xu h∆∞·ªõng ch·ªçn ch√≠nh s√°ch
    if (context.selectedPolicy) {
      const turn = context.currentTurn;
      const indicators = context.currentIndicators;

      // L∆∞u pattern ch·ªçn ch√≠nh s√°ch
      const pattern = {
        turn,
        policy: context.selectedPolicy,
        gdp: indicators?.gdp,
        unemployment: indicators?.unemployment,
        gini: indicators?.gini,
        legitimacy: indicators?.legitimacy,
        timestamp: Date.now(),
      };

      this.gamePatterns.push(pattern);

      // Gi·ªØ ch·ªâ 20 patterns g·∫ßn nh·∫•t
      if (this.gamePatterns.length > 20) {
        this.gamePatterns.shift();
      }
    }
  }

  // Ph√°t hi·ªán patterns trong c√°ch ch∆°i
  detectGamePatterns(context) {
    if (this.gamePatterns.length < 3) return;

    // Ph√°t hi·ªán xu h∆∞·ªõng ∆∞u ti√™n
    const recentPatterns = this.gamePatterns.slice(-5);

    // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i c√≥ ∆∞u ti√™n kinh t·∫ø hay x√£ h·ªôi
    let economicFocus = 0;
    let socialFocus = 0;

    recentPatterns.forEach((pattern) => {
      if (
        pattern.policy?.includes("thu·∫ø") ||
        pattern.policy?.includes("gdp") ||
        pattern.policy?.includes("kh·ªüi nghi·ªáp")
      ) {
        economicFocus++;
      }
      if (
        pattern.policy?.includes("l∆∞∆°ng") ||
        pattern.policy?.includes("y t·∫ø") ||
        pattern.policy?.includes("gi√°o d·ª•c")
      ) {
        socialFocus++;
      }
    });

    // L∆∞u xu h∆∞·ªõng
    if (economicFocus > socialFocus) {
      this.userPreferences.focus = "economic";
    } else if (socialFocus > economicFocus) {
      this.userPreferences.focus = "social";
    } else {
      this.userPreferences.focus = "balanced";
    }
  }

  analyze(input) {
    const keywords = input.toLowerCase();

    // L∆∞u l·∫°i h·ªôi tho·∫°i ƒë·ªÉ h·ªçc h·ªèi
    this.conversationHistory.push({
      input: input,
      timestamp: Date.now(),
      context: this.currentContext?.currentTurn,
    });

    // Gi·ªØ 50 cu·ªôc h·ªôi tho·∫°i g·∫ßn nh·∫•t
    if (this.conversationHistory.length > 50) {
      this.conversationHistory.shift();
    }

    // Training commands - L·ªánh training AI
    if (
      keywords.includes("train") ||
      keywords.includes("training") ||
      keywords.includes("h·ªçc") ||
      keywords.includes("train ai") ||
      keywords.includes("hu·∫•n luy·ªán")
    ) {
      return this.handleTrainingCommand(keywords);
    }

    // AI status check
    if (
      keywords.includes("ai status") ||
      keywords.includes("tr√¨nh ƒë·ªô ai") ||
      keywords.includes("ai ƒë√£ h·ªçc") ||
      keywords.includes("model version")
    ) {
      return this.showAIStatus();
    }

    // AI d·ª± ƒëo√°n n√¢ng cao
    if (
      keywords.includes("d·ª± ƒëo√°n") ||
      keywords.includes("s·∫Ω ra sao") ||
      keywords.includes("k·∫øt qu·∫£") ||
      keywords.includes("t∆∞∆°ng lai") ||
      keywords.includes("ti·∫øp theo")
    ) {
      return this.providePrediction();
    }

    // Ph√¢n t√≠ch so s√°nh v·ªõi l·ªãch s·ª≠
    if (
      keywords.includes("so s√°nh") ||
      keywords.includes("tr∆∞·ªõc ƒë√¢y") ||
      keywords.includes("kh√°c bi·ªát") ||
      keywords.includes("c·∫£i thi·ªán")
    ) {
      return this.compareWithHistory();
    }

    // H·ªçc t·ª´ l·ªói v√† ƒë∆∞a ra g·ª£i √Ω c√° nh√¢n h√≥a
    if (
      keywords.includes("sai") ||
      keywords.includes("l·ªói") ||
      keywords.includes("t·ªá") ||
      keywords.includes("kh√¥ng t·ªët")
    ) {
      return this.learnFromMistakes();
    }

    // Benchmark v√† test AI
    if (
      keywords.includes("test ai") ||
      keywords.includes("benchmark") ||
      keywords.includes("ki·ªÉm tra ai") ||
      keywords.includes("th·ª≠ ai")
    ) {
      return this.benchmarkAI();
    }

    // Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i
    if (
      keywords.includes("ph√¢n t√≠ch") ||
      keywords.includes("t√¨nh h√¨nh") ||
      keywords.includes("hi·ªán t·∫°i")
    ) {
      return this.analyzeCurrentSituation();
    }

    // G·ª£i √Ω ch√≠nh s√°ch
    if (
      keywords.includes("g·ª£i √Ω") ||
      keywords.includes("n√™n ch·ªçn") ||
      keywords.includes("ch√≠nh s√°ch n√†o") ||
      keywords.includes("kh·∫©n c·∫•p") ||
      keywords.includes("kh√¥i ph·ª•c")
    ) {
      return this.suggestPolicy();
    }

    // H·ªèi v·ªÅ nh·∫≠t k√Ω s·ª± ki·ªán
    if (
      keywords.includes("s·ª± ki·ªán") ||
      keywords.includes("g·∫ßn ƒë√¢y") ||
      keywords.includes("ƒë√£ l√†m") ||
      keywords.includes("nh·∫≠t k√Ω") ||
      keywords.includes("l·ªãch s·ª≠")
    ) {
      return this.showEventHistory();
    }

    // H·ªèi v·ªÅ game state c·ª• th·ªÉ
    if (keywords.includes("t√¥i ƒëang") || keywords.includes("l∆∞·ª£t n√†y")) {
      return this.provideGameHelp();
    }

    // C√°c c√¢u h·ªèi contextual m·ªõi
    if (
      keywords.includes("gi·∫£m th·∫•t nghi·ªáp") ||
      keywords.includes("t·∫°o vi·ªác l√†m") ||
      keywords.includes("c√°ch gi·∫£m th·∫•t nghi·ªáp")
    ) {
      return this.formatAnswerWithSuggestions(
        "üíº GI·∫¢M TH·∫§T NGHI·ªÜP:\n\n‚Ä¢ ƒê·∫ßu t∆∞ h·∫° t·∫ßng: T·∫°o nhi·ªÅu vi·ªác l√†m x√¢y d·ª±ng\n‚Ä¢ H·ªó tr·ª£ kh·ªüi nghi·ªáp: T·∫°o c∆° h·ªôi vi·ªác l√†m m·ªõi\n‚Ä¢ ƒê√†o t·∫°o ngh·ªÅ: N√¢ng cao k·ªπ nƒÉng lao ƒë·ªông\n‚Ä¢ Gi·∫£m thu·∫ø doanh nghi·ªáp: Khuy·∫øn kh√≠ch tuy·ªÉn d·ª•ng",
        [
          "Ch√≠nh s√°ch h·∫° t·∫ßng",
          "H·ªó tr·ª£ kh·ªüi nghi·ªáp",
          "Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i",
        ]
      );
    }

    if (
      keywords.includes("gi·∫£m b·∫•t b√¨nh ƒë·∫≥ng") ||
      keywords.includes("c√¥ng b·∫±ng x√£ h·ªôi") ||
      keywords.includes("b·∫•t b√¨nh ƒë·∫≥ng")
    ) {
      return this.formatAnswerWithSuggestions(
        "‚öñÔ∏è GI·∫¢M B·∫§T B√åNH ƒê·∫≤NG:\n\n‚Ä¢ TƒÉng l∆∞∆°ng t·ªëi thi·ªÉu: N√¢ng thu nh·∫≠p ng∆∞·ªùi ngh√®o\n‚Ä¢ C·∫£i c√°ch y t·∫ø: D·ªãch v·ª• y t·∫ø cho m·ªçi ng∆∞·ªùi\n‚Ä¢ ƒê·∫ßu t∆∞ gi√°o d·ª•c: C∆° h·ªôi h·ªçc t·∫≠p b√¨nh ƒë·∫≥ng\n‚Ä¢ Thu·∫ø l≈©y ti·∫øn: Ng∆∞·ªùi gi√†u ƒë√≥ng thu·∫ø nhi·ªÅu h∆°n",
        ["Ch√≠nh s√°ch l∆∞∆°ng t·ªëi thi·ªÉu", "C·∫£i c√°ch y t·∫ø", "Ph√¢n t√≠ch GINI"]
      );
    }

    if (
      keywords.includes("tƒÉng gdp") ||
      keywords.includes("ph√°t tri·ªÉn kinh t·∫ø") ||
      keywords.includes("c√°ch tƒÉng gdp")
    ) {
      return this.formatAnswerWithSuggestions(
        "üìà TƒÇNG GDP:\n\n‚Ä¢ ƒê·∫ßu t∆∞ h·∫° t·∫ßng: Th√∫c ƒë·∫©y s·∫£n xu·∫•t v√† l∆∞u th√¥ng\n‚Ä¢ H·ªó tr·ª£ kh·ªüi nghi·ªáp: Khuy·∫øn kh√≠ch ƒë·ªïi m·ªõi\n‚Ä¢ Gi·∫£m thu·∫ø doanh nghi·ªáp: Khuy·∫øn kh√≠ch ƒë·∫ßu t∆∞\n‚Ä¢ ƒê√†o t·∫°o nh√¢n l·ª±c: TƒÉng nƒÉng su·∫•t lao ƒë·ªông",
        ["Ch√≠nh s√°ch h·∫° t·∫ßng", "H·ªó tr·ª£ doanh nghi·ªáp", "Ph√¢n t√≠ch GDP"]
      );
    }

    if (
      keywords.includes("tƒÉng uy t√≠n") ||
      keywords.includes("d√¢n tin t∆∞·ªüng") ||
      keywords.includes("uy t√≠n ch√≠nh ph·ªß")
    ) {
      return this.formatAnswerWithSuggestions(
        "üèõÔ∏è TƒÇNG UY T√çN:\n\n‚Ä¢ C·∫£i c√°ch y t·∫ø: ChƒÉm s√≥c s·ª©c kh·ªèe d√¢n sinh\n‚Ä¢ ƒê·∫ßu t∆∞ gi√°o d·ª•c: T∆∞∆°ng lai cho con em\n‚Ä¢ Ch·ªëng tham nh≈©ng: Minh b·∫°ch, c√¥ng khai\n‚Ä¢ D·ªãch v·ª• c√¥ng t·ªët: Ph·ª•c v·ª• d√¢n hi·ªáu qu·∫£",
        ["C·∫£i c√°ch y t·∫ø", "ƒê·∫ßu t∆∞ gi√°o d·ª•c", "Ph√¢n t√≠ch uy t√≠n"]
      );
    }

    // C√¢u h·ªèi c∆° b·∫£n v·ªõi t·ª´ kh√≥a m·ªü r·ªông
    for (const [key, answer] of Object.entries(this.gameKnowledge.basic)) {
      if (
        keywords.includes(key) ||
        (key === "l√†m sao ch∆°i" &&
          (keywords.includes("c√°ch ch∆°i") || keywords.includes("ch∆°i game"))) ||
        (key === "m·ª•c ti√™u" && keywords.includes("m·ª•c ƒë√≠ch")) ||
        (key === "th·∫Øng thua" &&
          (keywords.includes("th·∫Øng") ||
            keywords.includes("thua") ||
            keywords.includes("k·∫øt th√∫c")))
      ) {
        return this.formatAnswerWithSuggestions(
          answer,
          this.getRelatedSuggestions(key)
        );
      }
    }

    // H·ªèi v·ªÅ ch·ªâ s·ªë v·ªõi t·ª´ kh√≥a m·ªü r·ªông
    for (const [key, answer] of Object.entries(this.gameKnowledge.indicators)) {
      if (
        keywords.includes(key) ||
        (key === "gdp" && keywords.includes("kinh t·∫ø")) ||
        (key === "th·∫•t nghi·ªáp" && keywords.includes("unemployment")) ||
        (key === "uy t√≠n" && keywords.includes("legitimacy")) ||
        (key === "qu√¢n s·ª±" && keywords.includes("military")) ||
        (key === "d·ªãch v·ª• c√¥ng" &&
          (keywords.includes("y t·∫ø") || keywords.includes("gi√°o d·ª•c")))
      ) {
        return this.formatAnswerWithSuggestions(
          `${key.toUpperCase()}: ${answer}`,
          this.getIndicatorSuggestions(key)
        );
      }
    }

    // H·ªèi v·ªÅ nh√≥m x√£ h·ªôi
    for (const [key, answer] of Object.entries(this.gameKnowledge.groups)) {
      if (
        keywords.includes(key) ||
        (key === "c√¥ng nh√¢n" && keywords.includes("workers")) ||
        (key === "trung l∆∞u" && keywords.includes("middle")) ||
        (key === "t∆∞ b·∫£n" && keywords.includes("capitalist")) ||
        (key === "thanh ni√™n" && keywords.includes("youth"))
      ) {
        return this.formatAnswerWithSuggestions(
          `${key}: ${answer}`,
          this.getGroupSuggestions(key)
        );
      }
    }

    // H·ªèi v·ªÅ ch√≠nh s√°ch
    for (const [key, answer] of Object.entries(this.gameKnowledge.policies)) {
      if (
        keywords.includes(key) ||
        (key === "thu·∫ø doanh nghi·ªáp" && keywords.includes("thu·∫ø")) ||
        (key === "l∆∞∆°ng t·ªëi thi·ªÉu" && keywords.includes("l∆∞∆°ng")) ||
        (key === "h·∫° t·∫ßng" && keywords.includes("infrastructure"))
      ) {
        return this.formatAnswerWithSuggestions(
          `${key}: ${answer}`,
          this.getPolicySuggestions(key)
        );
      }
    }

    // Chi·∫øn l∆∞·ª£c
    for (const [key, answer] of Object.entries(this.gameKnowledge.strategy)) {
      if (
        keywords.includes(key) ||
        (key === "b·∫Øt ƒë·∫ßu" &&
          (keywords.includes("start") || keywords.includes("ƒë·∫ßu game"))) ||
        (key === "cu·ªëi game" &&
          (keywords.includes("end") || keywords.includes("k·∫øt th√∫c"))) ||
        (key === "c√¢n b·∫±ng" && keywords.includes("balance"))
      ) {
        return this.formatAnswerWithSuggestions(
          answer,
          this.getStrategySuggestions(key)
        );
      }
    }

    // N·∫øu kh√¥ng kh·ªõp v·ªõi g√¨, tr·∫£ v·ªÅ null ƒë·ªÉ fallback
    return null;
  }

  analyzeCurrentSituation() {
    if (!this.currentContext) {
      return this.formatAnswerWithSuggestions(
        "‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin game hi·ªán t·∫°i. H√£y b·∫Øt ƒë·∫ßu ch∆°i ƒë·ªÉ t√¥i c√≥ th·ªÉ ph√¢n t√≠ch!",
        ["C√°ch ch∆°i game", "M·ª•c ti√™u", "Ch√≠nh s√°ch n√†o t·ªët"]
      );
    }

    const ctx = this.currentContext;
    let analysis = [];

    // Th√¥ng tin c∆° b·∫£n
    analysis.push(`üéÆ **L∆Ø·ª¢T ${ctx.currentTurn}/${ctx.maxTurns}**\n`);

    // Ph√¢n t√≠ch c√°c ch·ªâ s·ªë theo ƒë√∫ng lu·∫≠t ch∆°i
    const indicators = ctx.currentIndicators || {};
    let criticalIssues = [];
    let goodIndicators = [];

    // C√°c ch·ªâ s·ªë cao = t·ªët
    if (indicators.gdp < 30)
      criticalIssues.push("üìâ GDP qu√° th·∫•p (" + indicators.gdp + ")");
    else if (indicators.gdp > 70)
      goodIndicators.push("üìà GDP t·ªët (" + indicators.gdp + ")");

    if (indicators.legitimacy < 30)
      criticalIssues.push("üèõÔ∏è Uy t√≠n th·∫•p (" + indicators.legitimacy + ")");
    else if (indicators.legitimacy > 70)
      goodIndicators.push("üëë Uy t√≠n cao (" + indicators.legitimacy + ")");

    // C√°c ch·ªâ s·ªë th·∫•p = t·ªët
    if (indicators.unemployment > 70)
      criticalIssues.push(
        "üíº Th·∫•t nghi·ªáp cao (" + indicators.unemployment + ")"
      );
    else if (indicators.unemployment < 30)
      goodIndicators.push(
        "üíº Th·∫•t nghi·ªáp th·∫•p (" + indicators.unemployment + ")"
      );

    if (indicators.gini > 70)
      criticalIssues.push("‚öñÔ∏è B·∫•t b√¨nh ƒë·∫≥ng cao (" + indicators.gini + ")");
    else if (indicators.gini < 30)
      goodIndicators.push("‚öñÔ∏è X√£ h·ªôi c√¥ng b·∫±ng (" + indicators.gini + ")");

    // Ph√¢n t√≠ch nh√≥m x√£ h·ªôi
    const socialGroups = ctx.currentSocialGroups || {};
    const unhappyGroups = Object.entries(socialGroups)
      .filter(([group, satisfaction]) => satisfaction < 30)
      .map(([group, satisfaction]) => `${group} (${satisfaction})`);

    // Ph√¢n t√≠ch nh·∫≠t k√Ω s·ª± ki·ªán g·∫ßn ƒë√¢y
    const recentEvents = ctx.recentEvents || [];
    let eventSummary = "";
    if (recentEvents.length > 0) {
      eventSummary = "\nÔøΩ **S·ª∞ KI·ªÜN G·∫¶N ƒê√ÇY:**\n";
      recentEvents.slice(0, 3).forEach((event) => {
        if (event.type === "policy") {
          eventSummary += `‚Ä¢ L∆∞·ª£t ${event.turn}: ${event.title}\n`;
          if (event.conflictAnalysis) {
            eventSummary += `  M·ª©c xung ƒë·ªôt: ${event.conflictAnalysis.conflictLevel}\n`;
          }
        } else if (event.type === "random") {
          eventSummary += `‚Ä¢ S·ª± ki·ªán: ${event.title}\n`;
        }
      });
    }

    // T·ªïng h·ª£p ph√¢n t√≠ch
    if (criticalIssues.length > 0) {
      analysis.push(
        `‚ö†Ô∏è **V·∫§N ƒê·ªÄ NGHI√äM TR·ªåNG:**\n${criticalIssues.join("\n")}\n`
      );
    }

    if (goodIndicators.length > 0) {
      analysis.push(`‚úÖ **ƒêI·ªÇM T√çCH C·ª∞C:**\n${goodIndicators.join("\n")}\n`);
    }

    if (unhappyGroups.length > 0) {
      analysis.push(
        `üë• **NH√ìM KH√îNG H√ÄI L√íNG:**\n${unhappyGroups.join(", ")}\n`
      );
    }

    analysis.push(eventSummary);

    // ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông v·ªõi AI prediction
    const suggestions = this.generateContextualSuggestions();

    // Th√™m d·ª± ƒëo√°n AI n·∫øu c√≥ context
    if (this.currentContext) {
      const prediction = this.predictionModel.predictOutcome(
        this.currentContext,
        null
      );
      if (prediction.warnings.length > 0) {
        analysis.push(
          `\nü§ñ **AI C·∫¢NH B√ÅO:**\n${prediction.warnings.join("\n")}`
        );
      }
    }

    return this.formatAnswerWithSuggestions(
      analysis.join("\n"),
      suggestions.slice(0, 4)
    );
  }

  // AI Prediction - D·ª± ƒëo√°n t∆∞∆°ng lai
  providePrediction() {
    if (!this.currentContext) {
      return this.formatAnswerWithSuggestions(
        "ü§ñ C·∫ßn th√¥ng tin game ƒë·ªÉ c√≥ th·ªÉ d·ª± ƒëo√°n!",
        ["B·∫Øt ƒë·∫ßu ch∆°i", "Ph√¢n t√≠ch t√¨nh h√¨nh"]
      );
    }

    const ctx = this.currentContext;
    let prediction = "üîÆ **D·ª∞ ƒêO√ÅN AI:**\n\n";

    // D·ª± ƒëo√°n d·ª±a tr√™n xu h∆∞·ªõng hi·ªán t·∫°i
    const indicators = ctx.currentIndicators || {};
    const trends = this.calculateTrends();

    // D·ª± ƒëo√°n GDP
    if (indicators.gdp < 40) {
      prediction +=
        "üìâ **GDP**: C√≥ nguy c∆° suy tho√°i kinh t·∫ø. C·∫ßn ch√≠nh s√°ch k√≠ch c·∫ßu!\n";
    } else if (indicators.gdp > 70) {
      prediction +=
        "üìà **GDP**: Kinh t·∫ø ph√°t tri·ªÉn t·ªët. C√≥ th·ªÉ t·∫≠p trung v√†o x√£ h·ªôi.\n";
    }

    // D·ª± ƒëo√°n th·∫•t nghi·ªáp
    if (indicators.unemployment > 60) {
      prediction +=
        "üíº **Th·∫•t nghi·ªáp**: Nguy c∆° b·∫°o lo·∫°n x√£ h·ªôi. ∆Øu ti√™n t·∫°o vi·ªác l√†m!\n";
    }

    // D·ª± ƒëo√°n uy t√≠n
    if (indicators.legitimacy < 40) {
      prediction +=
        "üèõÔ∏è **Uy t√≠n**: C√≥ th·ªÉ m·∫•t quy·ªÅn l·ª±c. C·∫ßn PR v√† ch√≠nh s√°ch d√¢n sinh!\n";
    }

    // D·ª± ƒëo√°n k·∫øt c·ª•c game
    const winChance = this.calculateWinChance(ctx);
    prediction += `\nüéØ **Kh·∫£ nƒÉng th·∫Øng**: ${winChance}%\n`;

    // G·ª£i √Ω chi·∫øn l∆∞·ª£c d·ª±a tr√™n AI
    const strategy = this.getAIStrategy(ctx);
    prediction += `\nüß† **Chi·∫øn l∆∞·ª£c AI**: ${strategy}`;

    return this.formatAnswerWithSuggestions(prediction, [
      "G·ª£i √Ω c·ª• th·ªÉ",
      "Ph√¢n t√≠ch r·ªßi ro",
      "Chi·∫øn l∆∞·ª£c t·ªëi ∆∞u",
    ]);
  }

  // So s√°nh v·ªõi l·ªãch s·ª≠ ch∆°i
  compareWithHistory() {
    if (this.gamePatterns.length < 3) {
      return this.formatAnswerWithSuggestions(
        "üìä Ch∆∞a ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ so s√°nh. H√£y ch∆°i th√™m!",
        ["Ph√¢n t√≠ch hi·ªán t·∫°i", "G·ª£i √Ω ch√≠nh s√°ch"]
      );
    }

    let comparison = "üìä **SO S√ÅNH V·ªöI L·ªäCH S·ª¨:**\n\n";

    // Ph√¢n t√≠ch xu h∆∞·ªõng ng∆∞·ªùi ch∆°i
    const focus = this.userPreferences.focus;
    if (focus === "economic") {
      comparison += "üí∞ **Xu h∆∞·ªõng**: B·∫°n th∆∞·ªùng ∆∞u ti√™n kinh t·∫ø h∆°n x√£ h·ªôi\n";
      comparison += "üí° **G·ª£i √Ω**: Th·ª≠ c√¢n b·∫±ng v·ªõi ch√≠nh s√°ch x√£ h·ªôi\n\n";
    } else if (focus === "social") {
      comparison += "üë• **Xu h∆∞·ªõng**: B·∫°n th∆∞·ªùng ∆∞u ti√™n x√£ h·ªôi h∆°n kinh t·∫ø\n";
      comparison += "üí° **G·ª£i √Ω**: ƒê·ª´ng qu√™n ph√°t tri·ªÉn kinh t·∫ø\n\n";
    } else {
      comparison += "‚öñÔ∏è **Xu h∆∞·ªõng**: B·∫°n ch∆°i kh√° c√¢n b·∫±ng\n\n";
    }

    // So s√°nh v·ªõi patterns tr∆∞·ªõc
    const currentTurn = this.currentContext?.currentTurn || 0;
    const similarTurns = this.gamePatterns.filter(
      (p) => Math.abs(p.turn - currentTurn) <= 1
    );

    if (similarTurns.length > 0) {
      const avgGDP =
        similarTurns.reduce((sum, p) => sum + (p.gdp || 0), 0) /
        similarTurns.length;
      const currentGDP = this.currentContext?.currentIndicators?.gdp || 0;

      if (currentGDP > avgGDP + 10) {
        comparison +=
          "üìà **GDP**: T·ªët h∆°n trung b√¨nh " +
          Math.round(currentGDP - avgGDP) +
          " ƒëi·ªÉm!\n";
      } else if (currentGDP < avgGDP - 10) {
        comparison +=
          "üìâ **GDP**: Th·∫•p h∆°n trung b√¨nh " +
          Math.round(avgGDP - currentGDP) +
          " ƒëi·ªÉm.\n";
      }
    }

    return this.formatAnswerWithSuggestions(comparison, [
      "C·∫£i thi·ªán performance",
      "H·ªçc t·ª´ l·ªói",
      "Ph√¢n t√≠ch xu h∆∞·ªõng",
    ]);
  }

  // H·ªçc t·ª´ l·ªói v√† c·∫£i thi·ªán
  learnFromMistakes() {
    if (!this.currentContext) {
      return this.formatAnswerWithSuggestions(
        "ü§î H√£y cho t√¥i bi·∫øt c·ª• th·ªÉ v·∫•n ƒë·ªÅ g√¨ ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p!",
        ["Ph√¢n t√≠ch t√¨nh h√¨nh", "G·ª£i √Ω kh√¥i ph·ª•c"]
      );
    }

    let advice = "üéì **H·ªåC T·ª™ L·ªñI:**\n\n";

    const ctx = this.currentContext;
    const indicators = ctx.currentIndicators || {};

    // Ph√¢n t√≠ch l·ªói th∆∞·ªùng g·∫∑p
    if (indicators.unemployment > 70 && indicators.gini > 70) {
      advice += "‚ùå **L·ªói ph·ªï bi·∫øn**: ƒê·ªÉ c·∫£ th·∫•t nghi·ªáp V√Ä b·∫•t b√¨nh ƒë·∫≥ng cao\n";
      advice +=
        "‚úÖ **Gi·∫£i ph√°p**: ∆Øu ti√™n vi·ªác l√†m tr∆∞·ªõc, r·ªìi m·ªõi gi·∫£i quy·∫øt b·∫•t b√¨nh ƒë·∫≥ng\n\n";
    }

    if (indicators.gdp < 30 && indicators.legitimacy < 30) {
      advice += "‚ùå **L·ªói nghi√™m tr·ªçng**: C·∫£ kinh t·∫ø V√Ä uy t√≠n ƒë·ªÅu th·∫•p\n";
      advice +=
        "‚úÖ **Kh√¥i ph·ª•c**: Ch·ªçn ch√≠nh s√°ch v·ª´a tƒÉng GDP v·ª´a ƒë∆∞·ª£c d√¢n ·ªßng h·ªô (nh∆∞ h·∫° t·∫ßng)\n\n";
    }

    // G·ª£i √Ω d·ª±a tr√™n pattern c√° nh√¢n
    if (this.userPreferences.focus === "economic") {
      advice +=
        "üéØ **C√° nh√¢n h√≥a**: B·∫°n th∆∞·ªùng t·∫≠p trung kinh t·∫ø, nh∆∞ng ƒë·ª´ng qu√™n d√¢n sinh!\n";
    }

    advice +=
      "üí° **Nguy√™n t·∫Øc v√†ng**: Kh√¥ng bao gi·ªù ƒë·ªÉ 2 ch·ªâ s·ªë quan tr·ªçng c√πng xu·ªëng d∆∞·ªõi 30!";

    return this.formatAnswerWithSuggestions(advice, [
      "Chi·∫øn l∆∞·ª£c kh√¥i ph·ª•c",
      "G·ª£i √Ω ngay l·∫≠p t·ª©c",
      "Ph√¢n t√≠ch r·ªßi ro",
    ]);
  }

  // T√≠nh to√°n kh·∫£ nƒÉng th·∫Øng
  calculateWinChance(context) {
    const indicators = context.currentIndicators || {};
    const socialGroups = context.currentSocialGroups || {};

    let score = 0;

    // ƒêi·ªÉm t·ª´ ch·ªâ s·ªë
    Object.entries(indicators).forEach(([key, value]) => {
      if (key === "unemployment" || key === "gini") {
        score += ((100 - value) / 100) * 20; // Th·∫•p = t·ªët
      } else {
        score += (value / 100) * 20; // Cao = t·ªët
      }
    });

    // ƒêi·ªÉm t·ª´ nh√≥m x√£ h·ªôi
    const avgSatisfaction =
      Object.values(socialGroups).reduce((sum, val) => sum + val, 0) /
      Object.values(socialGroups).length;
    score += (avgSatisfaction / 100) * 20;

    return Math.round(Math.min(95, Math.max(5, score)));
  }

  // L·∫•y chi·∫øn l∆∞·ª£c AI
  getAIStrategy(context) {
    const winChance = this.calculateWinChance(context);
    const turnsLeft = context.maxTurns - context.currentTurn;

    if (winChance > 70) {
      return "Duy tr√¨ ·ªïn ƒë·ªãnh, tr√°nh r·ªßi ro cao";
    } else if (winChance < 30 && turnsLeft > 3) {
      return "C·∫ßn h√†nh ƒë·ªông quy·∫øt li·ªát, ch·∫•p nh·∫≠n r·ªßi ro ƒë·ªÉ kh√¥i ph·ª•c";
    } else if (turnsLeft <= 2) {
      return "∆Øu ti√™n ch·ªâ s·ªë quan tr·ªçng nh·∫•t, b·ªè qua ch·ªâ s·ªë ph·ª•";
    } else {
      return "C√¢n b·∫±ng ph√°t tri·ªÉn, t·ª´ng b∆∞·ªõc c·∫£i thi·ªán";
    }
  }

  calculateTrends() {
    // Simplified trend calculation
    return {
      gdpTrend: "stable",
      unemploymentTrend: "increasing",
      legitimacyTrend: "decreasing",
    };
  }

  showEventHistory() {
    if (!this.currentContext || !this.currentContext.recentEvents) {
      return this.formatAnswerWithSuggestions(
        "üìã Ch∆∞a c√≥ s·ª± ki·ªán n√†o trong game hi·ªán t·∫°i.",
        ["Ph√¢n t√≠ch t√¨nh h√¨nh", "G·ª£i √Ω ch√≠nh s√°ch"]
      );
    }

    const events = this.currentContext.recentEvents || [];

    if (events.length === 0) {
      return this.formatAnswerWithSuggestions(
        "üìã **NH·∫¨T K√ù S·ª∞ KI·ªÜN:**\n\nCh∆∞a c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c ghi nh·∫≠n.",
        ["Ph√¢n t√≠ch t√¨nh h√¨nh", "G·ª£i √Ω ch√≠nh s√°ch"]
      );
    }

    let history = "üìã **NH·∫¨T K√ù S·ª∞ KI·ªÜN:**\n\n";

    events.slice(0, 5).forEach((event, index) => {
      if (event.type === "policy") {
        history += `üèõÔ∏è **L∆∞·ª£t ${event.turn}: ${event.title}**\n`;
        history += `   ${event.description}\n`;

        if (event.conflictAnalysis) {
          const conflict = event.conflictAnalysis;
          history += `   üìä Xung ƒë·ªôt: ${conflict.conflictLevel}\n`;
          if (conflict.benefitGroup) {
            history += `   ‚úÖ C√≥ l·ª£i: ${conflict.benefitGroup}\n`;
          }
          if (conflict.lossGroup) {
            history += `   ‚ùå Thi·ªát h·∫°i: ${conflict.lossGroup}\n`;
          }
        }
        history += "\n";
      } else if (event.type === "random") {
        history += `‚ö° **${event.title}**\n`;
        history += `   ${event.description}\n\n`;
      }
    });

    if (events.length > 5) {
      history += `üìù *V√† ${events.length - 5} s·ª± ki·ªán kh√°c...*\n`;
    }

    return this.formatAnswerWithSuggestions(history, [
      "Ph√¢n t√≠ch t√°c ƒë·ªông",
      "G·ª£i √Ω ti·∫øp theo",
      "Xem t√¨nh h√¨nh hi·ªán t·∫°i",
    ]);
  }

  suggestPolicy() {
    if (!this.currentContext) {
      return this.formatAnswerWithSuggestions(
        "ü§ñ C·∫ßn th√¥ng tin game ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω AI!",
        ["B·∫Øt ƒë·∫ßu ch∆°i", "Ph√¢n t√≠ch t√¨nh h√¨nh"]
      );
    }

    const ctx = this.currentContext;
    let suggestion = "ü§ñ **G·ª¢I √ù AI TH√îNG MINH:**\n\n";

    // AI Analysis v·ªõi multiple factors
    const aiAnalysis = this.performAdvancedAnalysis(ctx);

    // ∆Øu ti√™n theo AI
    if (aiAnalysis.criticalFactors.length > 0) {
      suggestion += "üö® **KH·∫®N C·∫§P - AI ∆ØU TI√äN:**\n";
      aiAnalysis.criticalFactors.forEach((factor, index) => {
        suggestion += `${index + 1}. ${factor.description}\n`;
        suggestion += `   üí° G·ª£i √Ω: ${factor.recommendation}\n`;
        suggestion += `   üéØ Hi·ªáu qu·∫£ d·ª± ki·∫øn: ${factor.effectiveness}%\n\n`;
      });
    }

    // Chi·∫øn l∆∞·ª£c c√° nh√¢n h√≥a d·ª±a tr√™n h·ªçc m√°y
    const personalizedStrategy = this.getPersonalizedStrategy(ctx);
    suggestion += `üß† **CHI·∫æN L∆Ø·ª¢C C√Å NH√ÇN H√ìA:**\n${personalizedStrategy}\n\n`;

    // D·ª± ƒëo√°n k·∫øt qu·∫£ v·ªõi AI
    const predictions = this.predictPolicyOutcomes(ctx);
    if (predictions.length > 0) {
      suggestion += "üîÆ **D·ª∞ ƒêO√ÅN K·∫æT QU·∫¢:**\n";
      predictions.slice(0, 3).forEach((pred) => {
        suggestion += `‚Ä¢ ${pred.policy}: ${pred.outcome} (${pred.confidence}% tin c·∫≠y)\n`;
      });
    }

    const smartSuggestions = this.generateSmartSuggestions(ctx);

    return this.formatAnswerWithSuggestions(suggestion, smartSuggestions);
  }

  // AI Analysis n√¢ng cao
  performAdvancedAnalysis(context) {
    const indicators = context.currentIndicators || {};
    const socialGroups = context.currentSocialGroups || {};
    const criticalFactors = [];

    // Multi-factor analysis
    const riskMatrix = this.calculateRiskMatrix(indicators, socialGroups);

    // Ph√°t hi·ªán crisis cascade (hi·ªáu ·ª©ng domino)
    if (indicators.unemployment > 70 && indicators.gini > 60) {
      criticalFactors.push({
        description: "Nguy c∆° DOMINO: Th·∫•t nghi·ªáp + B·∫•t b√¨nh ƒë·∫≥ng ‚Üí B·∫°o lo·∫°n",
        recommendation: "ƒê·∫ßu t∆∞ h·∫° t·∫ßng (gi·∫£i quy·∫øt c·∫£ 2 v·∫•n ƒë·ªÅ)",
        effectiveness: 85,
        urgency: "CRITICAL",
      });
    }

    // Economic death spiral detection
    if (indicators.gdp < 30 && indicators.legitimacy < 40) {
      criticalFactors.push({
        description: "Spiral kinh t·∫ø: GDP th·∫•p ‚Üí M·∫•t uy t√≠n ‚Üí Kh√≥ c·ª©u v√£n",
        recommendation: "H·ªó tr·ª£ kh·ªüi nghi·ªáp (boost nhanh GDP + t·∫°o hy v·ªçng)",
        effectiveness: 75,
        urgency: "HIGH",
      });
    }

    // Social unrest prediction
    const unhappyGroups = Object.values(socialGroups).filter(
      (v) => v < 25
    ).length;
    if (unhappyGroups >= 3) {
      criticalFactors.push({
        description: `C√°ch m·∫°ng: ${unhappyGroups} nh√≥m b·∫•t m√£n ‚Üí Nguy c∆° l·∫≠t ƒë·ªï`,
        recommendation: "TƒÉng l∆∞∆°ng t·ªëi thi·ªÉu (l√†m h√†i l√≤ng nhi·ªÅu nh√≥m)",
        effectiveness: 70,
        urgency: "HIGH",
      });
    }

    return { criticalFactors, riskMatrix };
  }

  // Chi·∫øn l∆∞·ª£c c√° nh√¢n h√≥a
  getPersonalizedStrategy(context) {
    const userFocus = this.userPreferences.focus;
    const turnsLeft = context.maxTurns - context.currentTurn;

    let strategy = "";

    // D·ª±a tr√™n l·ªãch s·ª≠ h·ªçc ƒë∆∞·ª£c
    if (userFocus === "economic") {
      strategy =
        "B·∫°n th∆∞·ªùng ∆∞u ti√™n kinh t·∫ø. L·∫ßn n√†y h√£y th·ª≠ c√¢n b·∫±ng v·ªõi d√¢n sinh ƒë·ªÉ tr√°nh b·∫•t ·ªïn.";
    } else if (userFocus === "social") {
      strategy =
        "B·∫°n hay lo cho x√£ h·ªôi. ƒê·ª´ng qu√™n kinh t·∫ø - kh√¥ng c√≥ ti·ªÅn th√¨ kh√≥ l√†m ph√∫c l·ª£i.";
    } else {
      strategy =
        "B·∫°n ch∆°i c√¢n b·∫±ng t·ªët. Ti·∫øp t·ª•c chi·∫øn l∆∞·ª£c n√†y v√† ∆∞u ti√™n v·∫•n ƒë·ªÅ c·∫•p b√°ch nh·∫•t.";
    }

    // ƒêi·ªÅu ch·ªânh theo th·ªùi gian
    if (turnsLeft <= 2) {
      strategy +=
        " ‚è∞ S·∫Øp h·∫øt game - ch·ªâ t·∫≠p trung v√†o 1-2 ch·ªâ s·ªë quan tr·ªçng nh·∫•t!";
    }

    return strategy;
  }

  // D·ª± ƒëo√°n k·∫øt qu·∫£ ch√≠nh s√°ch
  predictPolicyOutcomes(context) {
    const predictions = [];
    const availablePolicies = [
      "ƒê·∫ßu t∆∞ h·∫° t·∫ßng",
      "TƒÉng l∆∞∆°ng t·ªëi thi·ªÉu",
      "H·ªó tr·ª£ kh·ªüi nghi·ªáp",
      "C·∫£i c√°ch y t·∫ø",
      "ƒê·∫ßu t∆∞ gi√°o d·ª•c",
    ];

    availablePolicies.forEach((policy) => {
      const prediction = this.predictionModel.predictOutcome(context, policy);
      predictions.push({
        policy,
        outcome: this.summarizeOutcome(prediction),
        confidence: Math.round(prediction.confidence * 100),
      });
    });

    return predictions.sort((a, b) => b.confidence - a.confidence);
  }

  summarizeOutcome(prediction) {
    if (prediction.riskLevel === "high") {
      return "R·ªßi ro cao, c√¢n nh·∫Øc k·ªπ";
    } else if (prediction.riskLevel === "low") {
      return "An to√†n, hi·ªáu qu·∫£ t·ªët";
    } else {
      return "C√¢n b·∫±ng, c√≥ th·ªÉ th·ª≠";
    }
  }

  generateSmartSuggestions(context) {
    const suggestions = [];
    const winChance = this.calculateWinChance(context);

    if (winChance < 40) {
      suggestions.push("üÜò Chi·∫øn l∆∞·ª£c kh·∫©n c·∫•p");
      suggestions.push("üî• H√†nh ƒë·ªông quy·∫øt li·ªát");
    } else if (winChance > 70) {
      suggestions.push("‚ö° T·ªëi ∆∞u h√≥a ƒëi·ªÉm s·ªë");
      suggestions.push("üõ°Ô∏è Duy tr√¨ ·ªïn ƒë·ªãnh");
    } else {
      suggestions.push("üìä Ph√¢n t√≠ch r·ªßi ro");
      suggestions.push("üéØ G·ª£i √Ω c·ª• th·ªÉ");
    }

    suggestions.push("ü§ñ D·ª± ƒëo√°n AI");
    return suggestions;
  }

  calculateRiskMatrix(indicators, socialGroups) {
    // Complex risk calculation v·ªõi nhi·ªÅu y·∫øu t·ªë
    let totalRisk = 0;

    // Economic risks
    if (indicators.gdp < 30) totalRisk += 4;
    if (indicators.unemployment > 70) totalRisk += 5;

    // Social risks
    if (indicators.gini > 70) totalRisk += 3;
    const unhappyCount = Object.values(socialGroups).filter(
      (v) => v < 25
    ).length;
    totalRisk += unhappyCount * 2;

    // Political risks
    if (indicators.legitimacy < 30) totalRisk += 6;

    return {
      level: totalRisk > 15 ? "CRITICAL" : totalRisk > 8 ? "HIGH" : "MODERATE",
      score: totalRisk,
    };
  }

  getGeneralHelp() {
    const baseHelp = `ü§ñ T√îI C√ì TH·ªÇ GI√öP B·∫†N:

üìö H·ªèi v·ªÅ c√°ch ch∆°i:
‚Ä¢ "L√†m sao ƒë·ªÉ ch∆°i game n√†y?"
‚Ä¢ "M·ª•c ti√™u c·ªßa game l√† g√¨?"
‚Ä¢ "C√°c ch·ªâ s·ªë c√≥ √Ω nghƒ©a g√¨?"

üìä Ph√¢n t√≠ch t√¨nh h√¨nh:
‚Ä¢ "Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i"
‚Ä¢ "C√°c ch·ªâ s·ªë c·ªßa t√¥i th·∫ø n√†o?"

üí° Xin g·ª£i √Ω:
‚Ä¢ "T√¥i n√™n ch·ªçn ch√≠nh s√°ch n√†o?"
‚Ä¢ "G·ª£i √Ω cho l∆∞·ª£t n√†y"

‚ùì H·ªèi c·ª• th·ªÉ v·ªÅ:
‚Ä¢ C√°c nh√≥m x√£ h·ªôi (c√¥ng nh√¢n, t∆∞ b·∫£n...)
‚Ä¢ C√°c ch√≠nh s√°ch (thu·∫ø, gi√°o d·ª•c, y t·∫ø...)
‚Ä¢ Chi·∫øn l∆∞·ª£c ch∆°i`;

    // Lu√¥n th√™m g·ª£i √Ω contextual
    return this.formatAnswerWithSuggestions(baseHelp, null);
  }

  // H·ªó tr·ª£ trong game
  provideGameHelp() {
    if (!this.currentContext) {
      return this.formatAnswerWithSuggestions(
        "üéÆ H√£y b·∫Øt ƒë·∫ßu ch∆°i game ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n!",
        ["C√°ch ch∆°i game n√†y", "Gi·∫£i th√≠ch c√°c ch·ªâ s·ªë", "C√°c nh√≥m x√£ h·ªôi l√† g√¨"]
      );
    }

    const { currentTurn, maxTurns, currentIndicators, currentSocialGroups } =
      this.currentContext;
    let help = `üéØ H·ªñ TR·ª¢ L∆Ø·ª¢T ${currentTurn}/${maxTurns}\n\n`;

    // Ph√¢n t√≠ch nhanh t√¨nh h√¨nh
    const criticalIndicators = Object.entries(currentIndicators)
      .filter(([_, value]) => value < 30)
      .map(([key, _]) => key);

    const unhappyGroups = Object.entries(currentSocialGroups)
      .filter(([_, value]) => value < 30)
      .map(([key, _]) => key);

    if (criticalIndicators.length > 0 || unhappyGroups.length > 0) {
      help += "‚ö†Ô∏è C·∫¢NH B√ÅO KH·∫®N C·∫§P:\n";
      if (criticalIndicators.length > 0) {
        help += `‚Ä¢ Ch·ªâ s·ªë nguy hi·ªÉm: ${criticalIndicators.join(", ")}\n`;
      }
      if (unhappyGroups.length > 0) {
        help += `‚Ä¢ Nh√≥m b·∫•t m√£n: ${unhappyGroups.join(", ")}\n`;
      }
      help += "\n";
    }

    const suggestions = [
      "Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i",
      "G·ª£i √Ω ch√≠nh s√°ch cho l∆∞·ª£t n√†y",
      "Gi·∫£i th√≠ch ch·ªâ s·ªë th·∫•p nh·∫•t",
      "Chi·∫øn l∆∞·ª£c cho giai ƒëo·∫°n n√†y",
    ];

    return this.formatAnswerWithSuggestions(
      help + "üí° T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:",
      suggestions
    );
  }

  // Format c√¢u tr·∫£ l·ªùi v·ªõi g·ª£i √Ω c√≥ th·ªÉ click
  formatAnswerWithSuggestions(answer, suggestions) {
    if (!suggestions || suggestions.length === 0) {
      // N·∫øu kh√¥ng c√≥ g·ª£i √Ω ƒë∆∞·ª£c cung c·∫•p, t·∫°o g·ª£i √Ω contextual
      suggestions = this.generateContextualSuggestions();
    }

    let formatted = answer + "\n\nüîç B·∫°n c√≥ th·ªÉ h·ªèi:\n";
    suggestions.forEach((suggestion) => {
      formatted += `<button class="suggestion-btn" onclick="askQuestion('${suggestion}')">${suggestion}</button>\n`;
    });

    return formatted;
  }

  // T·∫°o g·ª£i √Ω th√¥ng minh d·ª±a tr√™n t√¨nh h√¨nh game hi·ªán t·∫°i
  generateContextualSuggestions() {
    if (!this.currentContext) {
      return [
        "C√°ch ch∆°i game n√†y",
        "Gi·∫£i th√≠ch c√°c ch·ªâ s·ªë",
        "C√°c nh√≥m x√£ h·ªôi l√† g√¨",
        "Chi·∫øn l∆∞·ª£c b·∫Øt ƒë·∫ßu",
      ];
    }

    const { currentTurn, maxTurns, currentIndicators, currentSocialGroups } =
      this.currentContext;
    const suggestions = [];

    // G·ª£i √Ω theo giai ƒëo·∫°n game
    if (currentTurn <= 3) {
      suggestions.push("Chi·∫øn l∆∞·ª£c giai ƒëo·∫°n ƒë·∫ßu");
      suggestions.push("∆Øu ti√™n ch·ªâ s·ªë n√†o ·ªü ƒë·∫ßu game");
    } else if (currentTurn >= maxTurns - 2) {
      suggestions.push("C√°ch k·∫øt th√∫c an to√†n");
      suggestions.push("Duy tr√¨ ·ªïn ƒë·ªãnh cu·ªëi game");
    } else {
      suggestions.push("Chi·∫øn l∆∞·ª£c gi·ªØa game");
      suggestions.push("C√°ch c√¢n b·∫±ng c√°c ch·ªâ s·ªë");
    }

    // G·ª£i √Ω d·ª±a tr√™n v·∫•n ƒë·ªÅ c·ª• th·ªÉ
    const problems = this.identifyCurrentProblems();

    if (problems.criticalIndicators.length > 0) {
      const indicator = problems.criticalIndicators[0];
      if (indicator === "unemployment") {
        suggestions.push("C√°ch gi·∫£m th·∫•t nghi·ªáp nhanh");
        suggestions.push("Ch√≠nh s√°ch t·∫°o vi·ªác l√†m");
      } else if (indicator === "gini") {
        suggestions.push("Gi·∫£m b·∫•t b√¨nh ƒë·∫≥ng nh∆∞ th·∫ø n√†o");
        suggestions.push("Ch√≠nh s√°ch c√¥ng b·∫±ng x√£ h·ªôi");
      } else if (indicator === "gdp") {
        suggestions.push("C√°ch tƒÉng GDP nhanh");
        suggestions.push("Ch√≠nh s√°ch ph√°t tri·ªÉn kinh t·∫ø");
      } else if (indicator === "legitimacy") {
        suggestions.push("C√°ch tƒÉng uy t√≠n ch√≠nh ph·ªß");
        suggestions.push("L√†m th·∫ø n√†o ƒë·ªÉ d√¢n tin t∆∞·ªüng");
      } else if (indicator === "military") {
        suggestions.push("TƒÉng c∆∞·ªùng qu·ªëc ph√≤ng");
        suggestions.push("C√¢n b·∫±ng an ninh v√† kinh t·∫ø");
      } else if (indicator === "publicServices") {
        suggestions.push("C·∫£i thi·ªán d·ªãch v·ª• c√¥ng");
        suggestions.push("ƒê·∫ßu t∆∞ y t·∫ø v√† gi√°o d·ª•c");
      }
    }

    if (problems.unhappyGroups.length > 0) {
      const group = problems.unhappyGroups[0];
      if (group === "workers") {
        suggestions.push("L√†m sao ƒë·ªÉ c√¥ng nh√¢n h√†i l√≤ng");
        suggestions.push("Ch√≠nh s√°ch lao ƒë·ªông");
      } else if (group === "capitalists") {
        suggestions.push("L√†m sao ƒë·ªÉ t∆∞ b·∫£n ·ªßng h·ªô");
        suggestions.push("M√¥i tr∆∞·ªùng kinh doanh");
      } else if (group === "youth") {
        suggestions.push("Ch√≠nh s√°ch cho thanh ni√™n");
        suggestions.push("T·∫°o c∆° h·ªôi cho th·∫ø h·ªá tr·∫ª");
      } else if (group === "middleClass") {
        suggestions.push("H·ªó tr·ª£ t·∫ßng l·ªõp trung l∆∞u");
        suggestions.push("·ªîn ƒë·ªãnh kinh t·∫ø x√£ h·ªôi");
      } else if (group === "freelancers") {
        suggestions.push("H·ªó tr·ª£ freelancer");
        suggestions.push("Khuy·∫øn kh√≠ch kh·ªüi nghi·ªáp");
      }
    }

    // Lu√¥n c√≥ g·ª£i √Ω ph√¢n t√≠ch t√¨nh h√¨nh
    if (!suggestions.includes("Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i")) {
      suggestions.unshift("Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i");
    }

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng g·ª£i √Ω (4-5 c√°i)
    return suggestions.slice(0, 5);
  }

  // X√°c ƒë·ªãnh c√°c v·∫•n ƒë·ªÅ hi·ªán t·∫°i
  identifyCurrentProblems() {
    const criticalIndicators = [];
    const unhappyGroups = [];

    if (this.currentContext) {
      const { currentIndicators, currentSocialGroups } = this.currentContext;

      // T√¨m ch·ªâ s·ªë c√≥ v·∫•n ƒë·ªÅ
      Object.entries(currentIndicators || {}).forEach(([key, value]) => {
        if (key === "unemployment" || key === "gini") {
          if (value > 70) criticalIndicators.push(key);
        } else {
          if (value < 30) criticalIndicators.push(key);
        }
      });

      // T√¨m nh√≥m b·∫•t m√£n
      Object.entries(currentSocialGroups || {}).forEach(([key, value]) => {
        if (value < 40) unhappyGroups.push(key);
      });
    }

    return { criticalIndicators, unhappyGroups };
  }

  // G·ª£i √Ω li√™n quan ƒë·∫øn c√¢u h·ªèi c∆° b·∫£n
  getRelatedSuggestions(key) {
    const suggestions = {
      "l√†m sao ch∆°i": [
        "Gi·∫£i th√≠ch c√°c ch·ªâ s·ªë",
        "C√°c nh√≥m x√£ h·ªôi l√† g√¨",
        "Chi·∫øn l∆∞·ª£c b·∫Øt ƒë·∫ßu",
      ],
      "c√°ch ch∆°i": [
        "Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i",
        "G·ª£i √Ω ch√≠nh s√°ch",
        "M·ª•c ti√™u c·ªßa game",
      ],
      "m·ª•c ti√™u": [
        "Chi·∫øn l∆∞·ª£c c√¢n b·∫±ng",
        "C√°ch tr√°nh thua cu·ªôc",
        "∆Øu ti√™n ch·ªâ s·ªë n√†o",
      ],
      "th·∫Øng thua": [
        "D·∫•u hi·ªáu nguy hi·ªÉm",
        "C√°ch ph·ª•c h·ªìi ch·ªâ s·ªë",
        "Chi·∫øn l∆∞·ª£c cu·ªëi game",
      ],
    };
    return (
      suggestions[key] || ["Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i", "G·ª£i √Ω ch√≠nh s√°ch"]
    );
  }

  // G·ª£i √Ω cho c√°c ch·ªâ s·ªë
  getIndicatorSuggestions(key) {
    const suggestions = {
      gdp: ["Ch√≠nh s√°ch tƒÉng GDP", "T√°c ƒë·ªông c·ªßa h·∫° t·∫ßng", "Kinh t·∫ø v√† thu·∫ø"],
      "th·∫•t nghi·ªáp": [
        "C√°ch gi·∫£m th·∫•t nghi·ªáp",
        "Ch√≠nh s√°ch vi·ªác l√†m",
        "H·∫° t·∫ßng v·ªõi vi·ªác l√†m",
      ],
      gini: ["Gi·∫£m b·∫•t b√¨nh ƒë·∫≥ng", "Ch√≠nh s√°ch x√£ h·ªôi", "L∆∞∆°ng t·ªëi thi·ªÉu"],
      "uy t√≠n": ["TƒÉng uy t√≠n ch√≠nh ph·ªß", "D·ªãch v·ª• c√¥ng", "Y t·∫ø v√† gi√°o d·ª•c"],
      "qu√¢n s·ª±": ["C√¢n b·∫±ng an ninh", "Chi ph√≠ qu·ªëc ph√≤ng", "∆Øu ti√™n qu√¢n s·ª±"],
      "d·ªãch v·ª• c√¥ng": ["C·∫£i thi·ªán y t·∫ø", "ƒê·∫ßu t∆∞ gi√°o d·ª•c", "Ph√∫c l·ª£i x√£ h·ªôi"],
    };
    return (
      suggestions[key] || ["Ph√¢n t√≠ch t√¨nh h√¨nh hi·ªán t·∫°i", "G·ª£i √Ω ch√≠nh s√°ch"]
    );
  }

  // G·ª£i √Ω cho c√°c nh√≥m x√£ h·ªôi
  getGroupSuggestions(key) {
    const suggestions = {
      "c√¥ng nh√¢n": [
        "Ch√≠nh s√°ch l∆∞∆°ng",
        "Ph√∫c l·ª£i x√£ h·ªôi",
        "B·∫£o v·ªá ng∆∞·ªùi lao ƒë·ªông",
      ],
      "trung l∆∞u": ["Gi√°o d·ª•c v√† y t·∫ø", "·ªîn ƒë·ªãnh kinh t·∫ø", "D·ªãch v·ª• c√¥ng"],
      "t∆∞ b·∫£n": [
        "Thu·∫ø doanh nghi·ªáp",
        "Ch√≠nh s√°ch kh·ªüi nghi·ªáp",
        "M√¥i tr∆∞·ªùng kinh doanh",
      ],
      "thanh ni√™n": [
        "Vi·ªác l√†m cho thanh ni√™n",
        "Gi√°o d·ª•c",
        "C√¥ng ngh·ªá v√† m√¥i tr∆∞·ªùng",
      ],
      freelancer: [
        "H·ªó tr·ª£ kh·ªüi nghi·ªáp",
        "Linh ho·∫°t lao ƒë·ªông",
        "ƒê·ªïi m·ªõi s√°ng t·∫°o",
      ],
    };
    return suggestions[key] || ["Ph√¢n t√≠ch nh√≥m n√†y", "Ch√≠nh s√°ch ph√π h·ª£p"];
  }

  // G·ª£i √Ω cho ch√≠nh s√°ch
  getPolicySuggestions(key) {
    const suggestions = {
      "thu·∫ø doanh nghi·ªáp": [
        "T√°c ƒë·ªông thu·∫ø",
        "C√¢n b·∫±ng ng√¢n s√°ch",
        "Ph·∫£n ·ª©ng t∆∞ b·∫£n",
      ],
      "l∆∞∆°ng t·ªëi thi·ªÉu": [
        "C√¥ng nh√¢n v√† l∆∞∆°ng",
        "Th·∫•t nghi·ªáp",
        "Chi ph√≠ doanh nghi·ªáp",
      ],
      "gi√°o d·ª•c": ["ƒê·∫ßu t∆∞ d√†i h·∫°n", "Ch·∫•t l∆∞·ª£ng nh√¢n l·ª±c", "H·ªó tr·ª£ trung l∆∞u"],
      "y t·∫ø": ["D·ªãch v·ª• c√¥ng", "S·ª©c kh·ªèe d√¢n sinh", "Chi ph√≠ ng√¢n s√°ch"],
      "h·∫° t·∫ßng": ["T·∫°o vi·ªác l√†m", "Ph√°t tri·ªÉn kinh t·∫ø", "ƒê·∫ßu t∆∞ c√¥ng"],
    };
    return suggestions[key] || ["T√°c ƒë·ªông ch√≠nh s√°ch", "·∫¢nh h∆∞·ªüng nh√≥m x√£ h·ªôi"];
  }

  // G·ª£i √Ω cho chi·∫øn l∆∞·ª£c
  getStrategySuggestions(key) {
    const suggestions = {
      "b·∫Øt ƒë·∫ßu": ["Ph√¢n t√≠ch ban ƒë·∫ßu", "Ch·ªçn ch√≠nh s√°ch ƒë·∫ßu", "∆Øu ti√™n ch·ªâ s·ªë"],
      "gi·ªØa game": [
        "ƒêi·ªÅu ch·ªânh chi·∫øn l∆∞·ª£c",
        "C√¢n b·∫±ng nh√≥m",
        "Xu h∆∞·ªõng ch·ªâ s·ªë",
      ],
      "cu·ªëi game": ["Duy tr√¨ ·ªïn ƒë·ªãnh", "Tr√°nh r·ªßi ro", "Ho√†n th√†nh an to√†n"],
      "kh·∫©n c·∫•p": ["C·ª©u ch·ªâ s·ªë th·∫•p", "∆Øu ti√™n kh·∫©n c·∫•p", "Ph·ª•c h·ªìi nhanh"],
      "c√¢n b·∫±ng": ["Lu√¢n phi√™n nh√≥m", "Kh√¥ng thi√™n v·ªã", "H√†i h√≤a l·ª£i √≠ch"],
    };
    return suggestions[key] || ["Chi·∫øn l∆∞·ª£c t·ªïng th·ªÉ", "Ph√¢n t√≠ch t√¨nh h√¨nh"];
  }

  // Machine Learning: C·∫£i thi·ªán t·ª´ feedback
  learnFromFeedback(userInput, botResponse, wasHelpful = true) {
    const learningData = {
      input: userInput.toLowerCase(),
      response: botResponse,
      helpful: wasHelpful,
      context: this.currentContext?.currentTurn,
      timestamp: Date.now(),
    };

    // L∆∞u v√†o localStorage ƒë·ªÉ persistent learning
    let learningHistory = JSON.parse(
      localStorage.getItem("gameAssistantLearning") || "[]"
    );
    learningHistory.push(learningData);

    // Gi·ªØ 100 feedback g·∫ßn nh·∫•t
    if (learningHistory.length > 100) {
      learningHistory = learningHistory.slice(-100);
    }

    localStorage.setItem(
      "gameAssistantLearning",
      JSON.stringify(learningHistory)
    );

    // C·∫≠p nh·∫≠t user preferences
    this.updatePreferencesFromFeedback(learningData);
  }

  updatePreferencesFromFeedback(data) {
    if (!data.helpful) {
      // N·∫øu kh√¥ng h·ªØu √≠ch, tr√°nh response t∆∞∆°ng t·ª±
      if (!this.userPreferences.avoidTopics) {
        this.userPreferences.avoidTopics = [];
      }

      const topic = this.extractTopic(data.input);
      if (topic && !this.userPreferences.avoidTopics.includes(topic)) {
        this.userPreferences.avoidTopics.push(topic);
      }
    } else {
      // N·∫øu h·ªØu √≠ch, ∆∞u ti√™n topic n√†y
      if (!this.userPreferences.preferredTopics) {
        this.userPreferences.preferredTopics = [];
      }

      const topic = this.extractTopic(data.input);
      if (topic && !this.userPreferences.preferredTopics.includes(topic)) {
        this.userPreferences.preferredTopics.push(topic);
      }
    }
  }

  extractTopic(input) {
    if (input.includes("g·ª£i √Ω") || input.includes("n√™n ch·ªçn"))
      return "suggestions";
    if (input.includes("ph√¢n t√≠ch") || input.includes("t√¨nh h√¨nh"))
      return "analysis";
    if (input.includes("d·ª± ƒëo√°n") || input.includes("t∆∞∆°ng lai"))
      return "prediction";
    if (input.includes("s·ª± ki·ªán") || input.includes("l·ªãch s·ª≠"))
      return "history";
    return null;
  }

  // Advanced pattern recognition
  recognizeAdvancedPatterns() {
    if (this.gamePatterns.length < 5) return null;

    const patterns = {
      economicFirst: 0,
      socialFirst: 0,
      emergencyResponse: 0,
      safeStrategy: 0,
    };

    this.gamePatterns.forEach((pattern) => {
      // Ph√¢n t√≠ch xu h∆∞·ªõng ra quy·∫øt ƒë·ªãnh
      if (pattern.gdp < 40 && pattern.policy?.includes("kinh t·∫ø")) {
        patterns.economicFirst++;
      }
      if (pattern.unemployment > 60 && pattern.policy?.includes("x√£ h·ªôi")) {
        patterns.socialFirst++;
      }
      if (
        (pattern.gdp < 30 || pattern.legitimacy < 30) &&
        pattern.policy?.includes("kh·∫©n c·∫•p")
      ) {
        patterns.emergencyResponse++;
      }
      if (pattern.gdp > 60 && pattern.legitimacy > 60) {
        patterns.safeStrategy++;
      }
    });

    return patterns;
  }

  // Get AI insights based on accumulated data
  getAIInsights() {
    const insights = [];

    // Ph√¢n t√≠ch t·ª´ localStorage
    const learningHistory = JSON.parse(
      localStorage.getItem("gameAssistantLearning") || "[]"
    );

    if (learningHistory.length > 10) {
      const helpfulRate =
        learningHistory.filter((item) => item.helpful).length /
        learningHistory.length;

      if (helpfulRate > 0.8) {
        insights.push(
          "üéØ ƒê·ªô ch√≠nh x√°c AI: Cao (" + Math.round(helpfulRate * 100) + "%)"
        );
      } else if (helpfulRate < 0.6) {
        insights.push("üîß AI ƒëang h·ªçc v√† c·∫£i thi·ªán...");
      }
    }

    // Pattern insights
    const patterns = this.recognizeAdvancedPatterns();
    if (patterns) {
      if (patterns.emergencyResponse > patterns.safeStrategy) {
        insights.push("‚ö†Ô∏è B·∫°n th∆∞·ªùng g·∫∑p kh·ªßng ho·∫£ng - h√£y ch√∫ √Ω ph√≤ng ng·ª´a");
      }
      if (patterns.economicFirst > patterns.socialFirst * 2) {
        insights.push(
          "üí∞ Xu h∆∞·ªõng: Thi√™n v·ªÅ kinh t·∫ø - c√¢n b·∫±ng x√£ h·ªôi s·∫Ω t·ªët h∆°n"
        );
      }
    }

    return insights;
  }

  // Handle training commands
  handleTrainingCommand(keywords) {
    if (keywords.includes("b·∫Øt ƒë·∫ßu") || keywords.includes("start")) {
      return this.startTrainingSession();
    }

    if (keywords.includes("nhanh") || keywords.includes("fast")) {
      return this.quickTrain();
    }

    if (keywords.includes("s√¢u") || keywords.includes("deep")) {
      return this.deepTrain();
    }

    if (keywords.includes("reset")) {
      return this.resetAI();
    }

    return this.getTrainingHelp();
  }

  // Start interactive training session
  startTrainingSession() {
    const status = this.showAIStatus();
    const result = this.startTraining();

    return this.formatAnswerWithSuggestions(
      `üß† **B·∫ÆT ƒê·∫¶U TRAINING SESSION:**\n\n${status}\n\n${result}\n\nüéØ **Training ho√†n th√†nh!** AI ƒë√£ th√¥ng minh h∆°n.`,
      ["Ki·ªÉm tra AI status", "Test AI m·ªõi", "Deep training"]
    );
  }

  // Quick training v·ªõi √≠t d·ªØ li·ªáu
  quickTrain() {
    if (this.isTraining) {
      return this.formatAnswerWithSuggestions(
        "‚è≥ AI ƒëang training, vui l√≤ng ƒë·ª£i...",
        ["Ki·ªÉm tra ti·∫øn ƒë·ªô", "AI status"]
      );
    }

    // Simulate quick training
    this.neuralNetwork.trainingEpochs += 50;
    this.saveTrainingProgress();

    return this.formatAnswerWithSuggestions(
      `‚ö° **QUICK TRAINING HO√ÄN TH√ÄNH!**\n\nüß† Epochs: +50\nüìä T·ªïng epochs: ${this.neuralNetwork.trainingEpochs}\nüí° AI ƒë√£ n√¢ng c·∫•p nhanh!`,
      ["Test AI", "Deep training", "AI status"]
    );
  }

  // Deep training v·ªõi nhi·ªÅu d·ªØ li·ªáu
  deepTrain() {
    if (this.isTraining) {
      return this.formatAnswerWithSuggestions(
        "‚è≥ AI ƒëang trong deep training...",
        ["ƒê·ª£i ho√†n th√†nh", "AI status"]
      );
    }

    this.isTraining = true;

    // Simulate deep training v·ªõi nhi·ªÅu epochs
    setTimeout(() => {
      this.neuralNetwork.trainingEpochs += 200;
      this.saveTrainingProgress();
      this.isTraining = false;

      // Auto-notify when done
      if (window.addMessage) {
        window.addMessage(
          `üöÄ **DEEP TRAINING HO√ÄN TH√ÄNH!**\n\nüî• AI ƒë√£ tr·ªü n√™n si√™u th√¥ng minh!\nüìà +200 epochs\nüß† T·ªïng: ${this.neuralNetwork.trainingEpochs} epochs`,
          false,
          ["Test AI si√™u th√¥ng minh", "Benchmark AI"]
        );
      }
    }, 5000);

    return this.formatAnswerWithSuggestions(
      `üî• **DEEP TRAINING B·∫ÆT ƒê·∫¶U...**\n\n‚è∞ Th·ªùi gian: ~5 gi√¢y\nüéØ M·ª•c ti√™u: +200 epochs\nüß† AI s·∫Ω th√¥ng minh h∆°n nhi·ªÅu!`,
      ["ƒê·ª£i ho√†n th√†nh", "AI status"]
    );
  }

  // Reset AI to initial state
  resetAI() {
    this.neuralNetwork = new SimpleNeuralNetwork();
    this.gamePatterns = [];
    this.userPreferences = {};
    localStorage.removeItem("aiTrainingProgress");
    localStorage.removeItem("gameAssistantLearning");

    return this.formatAnswerWithSuggestions(
      `üîÑ **AI ƒê√É ƒê∆Ø·ª¢C RESET!**\n\nüß† Neural network: M·ªõi\nüìä Training epochs: 0\nüíæ D·ªØ li·ªáu: ƒê√£ x√≥a\n\n‚ú® AI s·∫µn s√†ng h·ªçc t·ª´ ƒë·∫ßu!`,
      ["B·∫Øt ƒë·∫ßu training", "Quick train", "Deep train"]
    );
  }

  // Show AI training help
  getTrainingHelp() {
    return this.formatAnswerWithSuggestions(
      `üéì **H∆Ø·ªöNG D·∫™N TRAINING AI:**\n\nüìö **L·ªánh training:**\n‚Ä¢ "train b·∫Øt ƒë·∫ßu" - Training c∆° b·∫£n\n‚Ä¢ "train nhanh" - Quick training (+50 epochs)\n‚Ä¢ "train s√¢u" - Deep training (+200 epochs)\n‚Ä¢ "train reset" - Reset AI v·ªÅ ban ƒë·∫ßu\n\nüìä **Ki·ªÉm tra:**\n‚Ä¢ "AI status" - Xem th√¥ng tin AI\n‚Ä¢ "tr√¨nh ƒë·ªô AI" - Xem model version\n\nüí° **M·∫πo:** C√†ng train nhi·ªÅu, AI c√†ng th√¥ng minh!`,
      ["Train b·∫Øt ƒë·∫ßu", "Train nhanh", "AI status"]
    );
  }

  // Show comprehensive AI status
  showAIStatus() {
    const epochs = this.neuralNetwork.trainingEpochs;
    const patterns = this.gamePatterns.length;
    const conversations = this.conversationHistory.length;

    let intelligence = "Newbie";
    if (epochs > 500) intelligence = "Master";
    else if (epochs > 200) intelligence = "Expert";
    else if (epochs > 100) intelligence = "Advanced";
    else if (epochs > 50) intelligence = "Intermediate";

    let experienceLevel = "M·ªõi b·∫Øt ƒë·∫ßu";
    if (patterns > 20) experienceLevel = "R·∫•t c√≥ kinh nghi·ªám";
    else if (patterns > 10) experienceLevel = "C√≥ kinh nghi·ªám";
    else if (patterns > 5) experienceLevel = "ƒêang h·ªçc h·ªèi";

    const prediction = this.currentContext
      ? this.getAIPrediction(this.currentContext)
      : null;

    let status = `ü§ñ **AI STATUS REPORT:**\n\n`;
    status += `üß† **Tr√¨nh ƒë·ªô:** ${intelligence}\n`;
    status += `üìä **Training epochs:** ${epochs}\n`;
    status += `üéÆ **Game patterns:** ${patterns}\n`;
    status += `üí¨ **Conversations:** ${conversations}\n`;
    status += `üìà **Kinh nghi·ªám:** ${experienceLevel}\n`;

    if (prediction) {
      status += `\nüîÆ **Model hi·ªán t·∫°i:**\n`;
      status += `‚Ä¢ Version: ${prediction.modelVersion}\n`;
      status += `‚Ä¢ Accuracy: ${prediction.accuracy}\n`;
      status += `‚Ä¢ Confidence: ${prediction.confidence}%\n`;
    }

    const suggestions = [];
    if (epochs < 100) suggestions.push("Train th√™m");
    if (epochs < 50) suggestions.push("Quick train");
    suggestions.push("Deep train", "Test AI");

    return this.formatAnswerWithSuggestions(status, suggestions);
  }

  // Save training progress
  saveTrainingProgress() {
    const data = {
      epochs: this.neuralNetwork.trainingEpochs,
      weights: this.neuralNetwork.weights,
      timestamp: Date.now(),
    };
    localStorage.setItem("aiTrainingProgress", JSON.stringify(data));
  }

  // Benchmark AI performance
  benchmarkAI() {
    if (!this.currentContext) {
      return this.formatAnswerWithSuggestions(
        "üß™ **AI BENCHMARK TEST:**\n\n‚ö†Ô∏è C·∫ßn c√≥ game context ƒë·ªÉ test AI.\nH√£y b·∫Øt ƒë·∫ßu ch∆°i game r·ªìi test l·∫°i!",
        ["B·∫Øt ƒë·∫ßu game", "AI status"]
      );
    }

    const prediction = this.getAIPrediction(this.currentContext);
    const testResults = this.runAITests();

    let benchmark = `üß™ **AI BENCHMARK RESULTS:**\n\n`;

    // Current prediction test
    benchmark += `üéØ **TEST HI·ªÜN T·∫†I:**\n`;
    benchmark += `‚Ä¢ Win Chance: ${prediction.winChance}%\n`;
    benchmark += `‚Ä¢ Risk Level: ${prediction.riskLevel}\n`;
    benchmark += `‚Ä¢ Confidence: ${prediction.confidence}%\n`;
    benchmark += `‚Ä¢ Model: ${prediction.modelVersion}\n\n`;

    // Performance tests
    benchmark += `üìä **PERFORMANCE:**\n`;
    benchmark += `‚Ä¢ Accuracy: ${testResults.accuracy}%\n`;
    benchmark += `‚Ä¢ Speed: ${testResults.speed}ms\n`;
    benchmark += `‚Ä¢ Memory: ${testResults.memory}KB\n`;
    benchmark += `‚Ä¢ Training: ${this.neuralNetwork.trainingEpochs} epochs\n\n`;

    // AI capabilities test
    benchmark += `üß† **CAPABILITIES:**\n`;
    testResults.capabilities.forEach((cap) => {
      benchmark += `‚Ä¢ ${cap.name}: ${cap.status}\n`;
    });

    // Grade
    const grade = this.calculateAIGrade(testResults);
    benchmark += `\nüèÜ **OVERALL GRADE: ${grade}**`;

    return this.formatAnswerWithSuggestions(benchmark, [
      "C·∫£i thi·ªán AI",
      "Deep training",
      "AI status",
    ]);
  }

  runAITests() {
    const startTime = Date.now();

    // Test prediction accuracy v·ªõi mock data
    const testCases = [
      {
        gdp: 80,
        unemployment: 20,
        gini: 30,
        legitimacy: 75,
        expected: "high_win",
      },
      {
        gdp: 25,
        unemployment: 80,
        gini: 85,
        legitimacy: 20,
        expected: "low_win",
      },
      {
        gdp: 50,
        unemployment: 50,
        gini: 50,
        legitimacy: 50,
        expected: "medium_win",
      },
    ];

    let correct = 0;
    testCases.forEach((test) => {
      const mockContext = {
        currentIndicators: test,
        currentTurn: 5,
      };
      const prediction = this.getAIPrediction(mockContext);

      if (test.expected === "high_win" && prediction.winChance > 70) correct++;
      else if (test.expected === "low_win" && prediction.winChance < 30)
        correct++;
      else if (
        test.expected === "medium_win" &&
        prediction.winChance >= 30 &&
        prediction.winChance <= 70
      )
        correct++;
    });

    const endTime = Date.now();
    const accuracy = Math.round((correct / testCases.length) * 100);

    return {
      accuracy,
      speed: endTime - startTime,
      memory: Math.round(JSON.stringify(this.neuralNetwork).length / 1024),
      capabilities: [
        {
          name: "Pattern Recognition",
          status: this.gamePatterns.length > 5 ? "‚úÖ Active" : "‚ùå Limited",
        },
        {
          name: "Personalization",
          status:
            Object.keys(this.userPreferences).length > 0
              ? "‚úÖ Active"
              : "‚ùå None",
        },
        {
          name: "Prediction Engine",
          status:
            this.neuralNetwork.trainingEpochs > 50 ? "‚úÖ Trained" : "‚ö†Ô∏è Basic",
        },
        {
          name: "Learning System",
          status:
            this.conversationHistory.length > 10 ? "‚úÖ Learning" : "‚ùå New",
        },
      ],
    };
  }

  calculateAIGrade(results) {
    let score = 0;

    // Accuracy weight: 40%
    score += (results.accuracy / 100) * 40;

    // Training weight: 30%
    const trainingScore = Math.min(100, this.neuralNetwork.trainingEpochs / 10);
    score += (trainingScore / 100) * 30;

    // Capabilities weight: 30%
    const activeCapabilities = results.capabilities.filter((cap) =>
      cap.status.includes("‚úÖ")
    ).length;
    const capabilityScore =
      (activeCapabilities / results.capabilities.length) * 100;
    score += (capabilityScore / 100) * 30;

    if (score >= 90) return "A+ (Si√™u th√¥ng minh)";
    if (score >= 80) return "A (R·∫•t th√¥ng minh)";
    if (score >= 70) return "B+ (Th√¥ng minh)";
    if (score >= 60) return "B (Kh√°)";
    if (score >= 50) return "C (Trung b√¨nh)";
    return "D (C·∫ßn c·∫£i thi·ªán)";
  }
}

// Export ƒë·ªÉ s·ª≠ d·ª•ng
window.GameAssistant = GameAssistant;
